#!/usr/bin/env bash
# ^^^ for syntax checking in the editor only

[ -z "$projectName" ] || {
	echo "â›” ERROR: $MDSC_CMD: RequireProjectArgument: projectName variable must be unset: $projectName" >&2
	set +e ; return 1
}

set -e

while true ; do
	case "$1" in
		--verbose)
			local MDSC_DETAIL=true ; export MDSC_DETAIL ; shift
			continue
		;;
		--no-cache)
			local MDSC_NO_CACHE=$1 ; export MDSC_NO_CACHE ; shift
			continue
		;;
		--no-index)
			local MDSC_NO_INDEX=$1 ; export MDSC_NO_INDEX ; shift
			continue
		;;
		--project)
			shift
			continue
		;;
		'')
			echo "â›” ERROR: $MDSC_CMD: 'projectName' argument is required!" >&2
			set +e ; return 1
		;;
		--project-from-env)
			projectName="$MDSC_PRJ_NAME" ; [ -n "$projectName" ] || {
				echo "â›” ERROR: $MDSC_CMD: --project-from-env: MDSC_PRJ_NAME is not set!" >&2
				set +e ; return 1
			}
			shift
			return 0
		;;
		'.'|--project-from-pwd)
			projectName="$( Distro ListDistroProjects --project '.' )" ; [ -n "$projectName" ] || {
				echo "â›” ERROR: $MDSC_CMD: --project-from-pwd: can't map working directory to project: $(pwd)" >&2
				set +e ; return 1
			}
			shift
			return 0
		;;
		*)
			projectName="${1#$MDSC_SOURCE/}"; shift
			if [ -f "$MDSC_CACHED/$projectName/project.inf" ] || { [ -f "$MDSC_SOURCE/$projectName/project.inf" ]; }; then
				return 0
			fi
			local candidates="$(
				DistroSystemContext --index-projects awk -v p="$projectName" '
					index($0, p) { print }
				'
			)"
			[ -n "$candidates" ] || {
				echo "$MDSC_CMD: â›” ERROR: No matching projects is found, was looking for: $projectName" >&2
				set +e ; return 1
			}
			
			if [ "$candidates" != "$( echo "$candidates" | head -n 1 )" ] ; then
				echo "$MDSC_CMD: ğŸ™‹ STOP: More than one match (looking for: '$projectName')" >&2
				printf "Projects: \n%s\n" "$( echo "$candidates" | sed -e 's|^|   |g' )" >&2
				set +e ; return 2
			fi

			projectName="$candidates"
			return 0
		;;
	esac
	return 0
done
