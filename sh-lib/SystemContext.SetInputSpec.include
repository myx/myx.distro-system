#!/usr/bin/env bash
# ^^^ for syntax checking in the editor only

: "${MMDAPP:?â›” ERROR: MMDAPP is not set}"

case "$1" in
	''|--run-from-detect|--init-variables|--distro-*)
		if [ -n "$MDLT_OPTION" ] && [ -n "$MDLT_ORIGIN" ] ; then
			:
		else
			local MDLT_CONSOLE_ORIGIN="$(
				set -- --.local-config-option-select-default MDLT_CONSOLE_ORIGIN .local
				. "${MDLT_ORIGIN:-"$MMDAPP/.local"}/myx/myx.distro-.local/sh-lib/LocalTools.Config.include"
			)"
			MDLC_INMODE="${MDLT_CONSOLE_ORIGIN#$MMDAPP/}"
			case "$MDLC_INMODE" in
				.local)
					export MDLT_ORIGIN="$MMDAPP/.local"
					export MDLC_INMODE=".local"
					export MDLT_OPTION="--run-from-.local"
				;;
				source)
					if [ -f "$MMDAPP/source/myx/myx.distro-.local/sh-lib/LocalContext.include" ] ; then
						export MDLT_ORIGIN="$MMDAPP/$MDLC_INMODE"
						export MDLC_INMODE="source"
						export MDLT_OPTION="--run-from-source"
					else
						echo "ðŸ™‹ WARNING: Context.SetInputSpec: '$MDLC_INMODE' mode requested but source is not available, defaulting to --run-from-local" >&2
						export MDLT_ORIGIN="$MMDAPP/.local"
						export MDLC_INMODE=".local"
						export MDLT_OPTION="--run-from-.local"
					fi
				;;
				/*)
					if [ -f "$MDLC_INMODE/myx/myx.distro-.local/sh-lib/LocalContext.include" ] ; then
						export MDLT_ORIGIN="$MDLC_INMODE"
						export MDLC_INMODE="extern"
						export MDLT_OPTION="--run-from-path $MDLC_INMODE"
					else
						echo "ðŸ™‹ WARNING: Context.SetInputSpec: '$MDLC_INMODE' requested but source is not available, defaulting to --run-from-.local" >&2
						export MDLT_ORIGIN="$MMDAPP/.local"
						export MDLC_INMODE=".local"
						export MDLT_OPTION="--run-from-.local"
					fi
				;;
				*)
					echo "ðŸ™‹ WARNING: Context.SetInputSpec: MDLT_CONSOLE_ORIGIN spec: '$MDLC_INMODE', defaulting to '.local'" >&2
					export MDLT_ORIGIN="$MMDAPP/.local"
					export MDLC_INMODE=".local"
					export MDLT_OPTION="--run-from-.local"
				;;
			esac
			if [ ! -f "$MDLT_ORIGIN/myx/myx.distro-.local/sh-lib/LocalContext.include" ] ; then
				echo "â›” ERROR: Context.SetInputSpec: ${1:---run-from-detect} can't find/detect origin" >&2
				exit 1
			fi
		fi
		case "$1" in 
			--distro-*)
				# set -- "$1" "$@"
			;;
			'')
				set -- "--distro-path-auto" "$@"
			;;
			*)
				shift ;	set -- "--distro-path-auto" "$@"
			;;
		esac
	;;
	--run-from-path)
		if [ -n "$2" ] && [ -f "$2/myx/myx.distro-system/sh-lib/SystemContext.include" ] ; then
			export MDLT_ORIGIN="$2"
			export MDSC_INMODE="extern"
			export MDSC_OPTION="--run-from-path $2"
		else
			echo "ðŸ™‹ WARNING: Context.SetInputSpec: $1 requested but source is not available at '$2', defaulting to --run-from-.local" >&2
			export MDLT_ORIGIN="$MMDAPP/.local"
			export MDLC_INMODE=".local"
			export MDLT_OPTION="--run-from-.local"
		fi
		shift ; set -- "--distro-path-auto" "$@"
	;;
	--run-from-source)
		if [ ! -f "$MMDAPP/source/myx/myx.distro-system/sh-lib/SystemContext.include" ] ; then
			echo "ðŸ™‹ WARNING: Context.SetInputSpec: $1 requested but source is not available, defaulting to --run-from-local" >&2
			export MDLT_ORIGIN="$MMDAPP/.local"
			export MDLC_INMODE=".local"
			export MDLT_OPTION="--run-from-.local"
		else
			export MDLT_ORIGIN="$MMDAPP/source"
			export MDLC_INMODE="source"
			export MDLT_OPTION="--run-from-source"
		fi
		shift ; set -- "--distro-path-auto" "$@"
	;;
esac

case "$1" in
	--distro-path-auto)
		if [ -n "$MDSC_OPTION" ] && [ -n "$MDSC_INMODE" ] ; then
			# vars seem to be set...
			return 0
		fi
		if [ -n "$MDSC_OPTION" ] ; then
			shift ; set -- "$MDSC_OPTION" "$@"
		elif [ -d "$MMDAPP/source/" ] && [ -d "$MMDAPP/.local/source-cache" ] ; then
			if [ -d "$MMDAPP/output/" ] ; then
				shift ; set -- "--distro-from-output" "$@"
			else
				shift ; set -- "--distro-from-cached" "$@"
			fi
		elif [ -d "$MMDAPP/source/" ] ; then
			shift ; set -- "--distro-from-source" "$@"
		elif [ -d "$MMDAPP/distro/" ] ; then
			shift ; set -- "--distro-from-distro" "$@"
		else
			echo "â›” ERROR: SystemContext.SetInputSpec: can't detect proper input source" >&2
			exit 1
		fi
	;;
esac

if [ "$adpcChangeSpec" = "true" ] ; then
	: "${1:?â›” ERROR: SystemContext.SetInputSpec: inputSpec argument is required}"
	if ! DistroSystemContext --is-spec-option "$1" ; then
		echo "â›” ERROR: SystemContext.SetInputSpec: inputSpec argument is invalid: $1" >&2
		exit 1
	fi
	local previousSpec="$MDSC_OPTION"
fi

case "$1" in
	--distro-source-only) # --no-cache --no-index
		MDSC_SOURCE="$MMDAPP/source"
		MDSC_CACHED=
		MDSC_OUTPUT=
		MDSC_INMODE="source"
		MDSC_OPTION="--distro-source-only"
	;;
	--distro-from-source) # during source-console
		MDSC_SOURCE="$MMDAPP/source"
		MDSC_CACHED="$MMDAPP/.local/system-index"
		MDSC_OUTPUT="$MMDAPP/.local/source-cache"
		MDSC_INMODE="source"
		MDSC_OPTION="--distro-from-source"
	;;
	--distro-from-cached) # during source-prepare
		MDSC_SOURCE="$MMDAPP/.local/source-cache/sources"
		MDSC_CACHED="$MMDAPP/.local/output-cache/prepared"
		MDSC_OUTPUT="$MMDAPP/.local/output-cache"
		MDSC_INMODE="source"
		MDSC_OPTION="--distro-from-cached"
	;;
	--distro-from-output) # during source-process
		MDSC_SOURCE="$MMDAPP/.local/source-cache/sources"
		MDSC_CACHED="$MMDAPP/.local/output-cache/distro"
		MDSC_OUTPUT="$MMDAPP/.local/output-cache"
		MDSC_INMODE="source"
		MDSC_OPTION="--distro-from-output"
	;;
	--distro-from-distro) # during deploy operations
		MDSC_SOURCE="$MMDAPP/distro"
		MDSC_CACHED="$MMDAPP/.local/system-index"
		MDSC_OUTPUT="$MMDAPP/.local/output-cache"
		MDSC_INMODE="deploy"
		MDSC_OPTION="--distro-from-distro"
	;;
	*)
		echo "â›” ERROR: SystemContext.SetInputSpec: Invalid input spec: $1" >&2
		exit 1
	;;
esac

if [ -z "${previousSpec:-$MDSC_OPTION}" ] || [ "$previousSpec" != "$MDSC_OPTION" ] ; then
	export MDSC_INMODE
	export MDSC_SOURCE
	export MDSC_CACHED
	export MDSC_OUTPUT
	export MDSC_OPTION
	
	echo "SystemContext.SetInputSpec: mode: $MDSC_INMODE, spec: $MDSC_OPTION" >&2
	# echo "SystemContext.SetInputSpec: mode: $MDSC_INMODE, spec: $MDSC_OPTION, args: $@" >&2
fi
