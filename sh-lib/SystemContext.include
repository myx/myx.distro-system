#!/usr/bin/env bash
# ^^^ for syntax checking in the editor only

: "${MMDAPP:?⛔ ERROR: MMDAPP is not set}"

if [ -z "$MDLT_ORIGIN" ] || [ "$MDLT_ORIGIN" = "${MDLT_ORIGIN#$MMDAPP/}" ] ; then
	export MDSC_DETAIL=""
	export MDSC_INMODE=""
	export MDSC_SOURCE=""
	export MDSC_CACHED=""
	export MDSC_OUTPUT=""
	export MDSC_OPTION=""

	export MDLT_ORIGIN="${MDLT_ORIGIN:=$MMDAPP/.local}"
	
	echo "DistroSystemContext: init: $MDLT_ORIGIN" >&2
fi

if ! type DistroSystemContext >/dev/null 2>&1 ; then
	if ! type Require >/dev/null 2>&1 ; then
		Require(){
			local distroCommand="$1" ; shift
			if [ -z "$distroCommand" ] || [ "--help" = "$distroCommand" ] ; then
				( . "$MDLT_ORIGIN/myx/myx.distro-.local/sh-lib/help/Help.Require.include" )
				set +e ; return 1
			fi
			if type "${distroCommand%.fn.sh}" >/dev/null 2>&1 ; then
				return 0
			fi
			
			local ITEM
			for ITEM in system source deploy remote .local ; do
				if [ -f "$MDLT_ORIGIN/myx/myx.distro-$ITEM/sh-scripts/${distroCommand%.fn.sh}.fn.sh" ] ; then
					. "$MDLT_ORIGIN/myx/myx.distro-$ITEM/sh-scripts/${distroCommand%.fn.sh}.fn.sh"
					return 0
				fi
			done
			source "${distroCommand%.fn.sh}.fn.sh"
		}
	fi

	if ! type Action >/dev/null 2>&1 ; then
		Action(){
			if [ -z "$1" ] || [ "$1" == "--help" ] ; then
				( . "$MDLT_ORIGIN/myx/myx.distro-system/sh-lib/help/Help.ConsoleAction.include" )
				set +e ; return 1
			fi
			local actionCommand="$1" ; shift
			if [ ! -x "$MMDAPP/actions/${actionCommand}" ] ; then
				echo "⛔ ERROR: unknown action: ${actionCommand}" >&2
				set +e ; return 1
			fi
			case "$actionCommand" in
				*.sh)
					( set +e ; "$MMDAPP/actions/$actionCommand" "$@" && echo "$actionCommand: 🏁 finished." ) || {
						EXITCODE=$?
						echo "⛔ ERROR: exited with error status ($EXITCODE)" >&2
						set +e ; return $EXITCODE
					}
				;;
				*.url)
					open "$MMDAPP/actions/$actionCommand"
				;;
				*)
					echo "Unknown Action Type, source:" >&2
					myx.common lib/prefix "    " cat "$MMDAPP/actions/$actionCommand"
			esac
		}
	fi

	if ! type Distro >/dev/null 2>&1 ; then
		Distro(){
			if [[ -n "$COMP_LINE" || -n "$COMP_WORDS" ]] && [ "${1#--completion}" = "$1" ]; then
				. "$MDLT_ORIGIN/myx/myx.distro-system/sh-lib/SystemConsole.CompletionFunction.include"
				return 0
			fi
			case "$1" in 
				''|--*)
					( set -e ; . "$MDLT_ORIGIN/myx/myx.distro-system/sh-lib/SystemConsole.include" )
					return 0
				;;
			esac

			local distroCommand="$1" ; shift
			if ! type "${distroCommand%.fn.sh}" >/dev/null 2>&1 ; then
				if ! command -v "${distroCommand%.fn.sh}.fn.sh" >/dev/null 2>&1; then
					echo "⛔ ERROR: unknown command: ${distroCommand%.fn.sh}" >&2
					set +e ; return 1
				fi
				. "${distroCommand%.fn.sh}.fn.sh"
			fi

			set +e ; "${distroCommand%.fn.sh}" "$@" || {
				EXITCODE=$?
				echo "⛔ ERROR: exited with error status ($EXITCODE)" >&2
				set +e ; return $EXITCODE
			}
			return 0
		}
	fi

	DistroSystemContext(){
		case "$1" in
			--is-spec-option)
				case "$2" in
					# distro-source & distro-deploy
					--distro-path-auto|--distro-source-only|--distro-from-source|--distro-from-cached|--distro-from-output|--distro-from-distro)
						return 0
					;;
					# distro-.local & distro-remote
					--init-variables|--run-from-source|--run-from-.local|--run-from-detect|--run-from-path)
						return 0
					;;
				esac
				set +e ; return 1
			;;
			--init-variables|--run-from-detect|--distro-path-auto)
				if    [ -n "$MDLT_ORIGIN" ] && [ -n "$MDLT_OPTION" ] \
				   && [ -n "$MDSC_OPTION" ] && [ -n "$MDSC_INMODE" ]
				then
					shift
					return 0
				fi
				[ -z "$MDSC_DETAIL" ] || echo "DistroSystemContext: input spec: $1" >&2
				. "$MDLT_ORIGIN/myx/myx.distro-system/sh-lib/SystemContext.SetInputSpec.include"
				return 0
			;;
			--distro-*|--run-from-*|--init-*)
				if DistroSystemContext --is-spec-option "$1" ; then
					local adpcChangeSpec="true"
					[ -z "$MDSC_DETAIL" ] || echo "DistroSystemContext: input spec: $1" >&2
					. "$MDLT_ORIGIN/myx/myx.distro-system/sh-lib/SystemContext.SetInputSpec.include"
					return 0
				fi
			;;
			--index-*)
				[ -n "$2" ] || {
					echo "⛔ ERROR: SystemContext: command argument required, use 'cat':" "$@" >&2
					set +e ; return 1
				}
				local idx="${1#'--index-'}" cmd="${2:-'cat'}"; shift 2 || :
				local env
				case "$idx" in
					projects) env=MDSC_IDPALL; ;;
					sequence) env=MDSC_IDBSEQ; ;;
					sequence-merged) env=MDSC_IDSEQS; ;;
					declares) env=MDSC_IDODCL; ;;
					declares-merged) env=MDSC_IDADCL; ;;
					keywords) env=MDSC_IDOKWD; ;;
					keywords-merged) env=MDSC_IDAKWD; ;;
					provides) env=MDSC_IDOPRV; ;;
					provides-merged) env=MDSC_IDAPRV; ;;
					*) 
						echo "⛔ ERROR: DistroSystemContext: unknown index name: $idx" >&2
						set +e ; return 1
					;;
				esac
				if [ "$MDSC_NO_CACHE" != "--no-cache" ] ; then
					if eval '[ -n "${'$env':0:1}" ]' ; then
						[ full != "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: DistroSystemContext: --index-* using env-cached ($idx)" >&2
						if [ 'cat ' = "$cmd $1" ]; then
							eval 'echo "$'$env'"'
							return 0
						fi
						eval 'echo "$'$env'" | ' "$cmd" "$@"
						return 0
					fi
					if eval '[ -f "$'$env'_NAME" ]' ; then
						[ full != "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: DistroSystemContext: --index-* using env-cached file ($idx)" >&2
						if [ 'cat ' = "$cmd $1" ]; then
							eval 'cat "$'$env'_NAME"'
							return 0
						fi
						"$cmd" "$@" "$( 
							eval 'printf '%s' "$'$env'_NAME"' 
						)"
						return 0
					fi
					if [ -d "$MDSC_CACHED" ] ; then
						local cacheFile="$MDSC_CACHED/distro-$idx.txt"
						if [ -f "$cacheFile" ]; then
							if { [ -f "$MDSC_CACHED/distro-index.inf" ] && [ ! "$cacheFile" -nt "$MDSC_CACHED/distro-index.inf" ]; } \
							|| { [ -n "$BUILD_STAMP" ] && [ ! "$BUILD_STAMP" -gt "$( date -u -r "$cacheFile" "+%Y%m%d%H%M%S" )" ]; } \
							|| { [ -f "$MDSC_CACHED/build-time-stamp.txt" ] && [ ! "$MDSC_CACHED/build-time-stamp.txt" -nt "$cacheFile" ]; } ; then

								[ full != "$MDSC_DETAIL" ] || echo "| $MDSC_CMD: DistroSystemContext: --index-* using cached ($idx)" >&2
								"$cmd" "$@" "$cacheFile"
								return 0

							fi
						fi
					fi
				fi
				. "$MDLT_ORIGIN/myx/myx.distro-system/sh-lib/system-context/DistroSystemIndexRunnerCacheMiss.include"
				return 0
			;;
			--select-intersect-index-*)
				[ -n "${MDSC_SELECT_PROJECTS:0:1}" ] || { 
					echo "⛔ ERROR: SystemContext: no projects currently selected:" "$@" >&2
					set +e ; return 1
				}
				[ -n "$2" ] || {
					echo "⛔ ERROR: SystemContext: command argument required, use 'cat':" "$@" >&2
					set +e ; return 1
				}
				local idx="--${1#'--select-intersect-'}" cmd="${2:-'cat'}"; shift 2 || :
				DistroSystemContext "$idx" awk '
					BEGIN {
						s = ENVIRON["MDSC_SELECT_PROJECTS"]
						n = split(s, L, "\n")
						for (i = 1; i <= n; i++) if (L[i] != "") map[L[i]] = 1
					}
					$1 in map { print }
				' \
				| "$cmd" "$@"
				return 0
			;;
			# filters index-* by first (key - projectName) column, ENV_NAME arg
			--intersect-index-*)
				[ -n "$2" ] || {
					echo "⛔ ERROR: SystemContext: variable name is required, MDSC_SELECT_PROJECTS?:" "$@" >&2
					set +e ; return 1
				}
				local env=$2
				[ -n "${!env:0:1}" ] || {
					echo "⛔ ERROR: SystemContext: no projects currently selected ($env variable):" "$@" >&2
					set +e ; return 1
				}
				[ -n "$3" ] || {
					echo "⛔ ERROR: SystemContext: command argument required, use 'cat':" "$@" >&2
					set +e ; return 1
				}
				local idx="--${1#'--intersect-'}" cmd="${3:-'cat'}"; shift 3 || :
				eval export "$env"
				DistroSystemContext "$idx" awk -v ev="$env" '
					BEGIN {
						s = ENVIRON[ev]
						n = split(s, L, "\n")
						for (i = 1; i <= n; i++) if (L[i] != "") map[L[i]] = 1
					}
					$1 in map { print }
				' \
				| "$cmd" "$@"
				return 0
			;;
			# unrolls '.', '*', '**' by filter prefix
			--unroll-filter-index-*)
				[ -n "$2" ] || {
					echo "⛔ ERROR: SystemContext: filter argument is required:" "$@" >&2
					set +e ; return 1
				}
				local filter=$2
				[ -n "${filter:0:1}" ] || {
					echo "⛔ ERROR: SystemContext: filter argument required:" "$@" >&2
					set +e ; return 1
				}
				[ -n "$3" ] || {
					echo "⛔ ERROR: SystemContext: command argument required, use 'cat':" "$@" >&2
					set +e ; return 1
				}
				local idx="--${1#'--unroll-filter-'}" cmd="${3:-'cat'}" column; shift 3 || :
				case "${idx#'--index-'}" in
					declares|keywords|provides) column=2; ;;
					declares-merged|keywords-merged|provides-merged) column=3; ;;
					*) 
						echo "⛔ ERROR: DistroSystemContext: unroll: unknown or unsupported index name: $idx" >&2
						set +e ; return 1
					;;
				esac
				set -x
				local sequenceIndex; sequenceIndex=$( DistroSystemContext --index-sequence-merged echo )
				[ "sequenceIndex" != "/dev/stdin" ] || sequenceIndex=<( DistroSystemContext --index-sequence-merged cat )
				DistroSystemContext "$idx" awk -v c="$column" -v m="$filter" -v s="$sequenceIndex" '
					BEGIN {
						k = c - 1

						# load sequences
						while ((getline line < s) > 0) {
							split(line, f, " ")
							a = f[1]; b = f[2]
							map1[a] = (map1[a] ? map1[a] SUBSEP b : b)
							map1_count[a]++
							map2[b] = (map2[b] ? map2[b] SUBSEP a : a)
							map2_count[b]++
						}
						close(s)
					}
					index($c,m)==1 { 
						r = substr($c,length(m)+1); 
						pos = index(r, ":")
						if (pos > 0) {
							left = substr(r, 1, pos-1)
							rest = substr(r, pos+1)
						} else {
							left = r
							rest = ""
						}

						if (left == ".") {
							n = split(map1[$k], v, SUBSEP)
							for (i = 1; i <= n; i++) {
								rm = $k " " v[i] ":" substr(r, pos+1)
								if (!x[rm]++) print rm
							}
							n = split(map2[$k], v, SUBSEP)
							for (i = 1; i <= n; i++) {
								rm = $k " " v[i] ":" substr(r, pos+1)
								if (!x[rm]++) print rm
							}
							next
						}
						if (left == "*") {
							rm=$k " " $k ":" substr(r, pos+1);
							if (!x[rm]++) print rm; 
							next
						}
						if (left == "**") {
							rm=$k " " $k ":" substr(r, pos+1);
							if (!x[rm]++) print rm; 
							next
						}

						rm=$k " " r; 
						if (!x[rm]++) print rm; 
					}
				' \
				| "$cmd" "$@"
				set -x
				set +x
				return 0
			;;
			# unrolls '.', '*', '**' by filter prefix and matches next argument
			--unroll-filter-match-index-*)
				[ -n "$2" ] || {
					echo "⛔ ERROR: SystemContext: variable name is required, MDSC_SELECT_PROJECTS?:" "$@" >&2
					set +e ; return 1
				}
				local env=$2
				[ -n "${!env:0:1}" ] || {
					echo "⛔ ERROR: SystemContext: no projects currently selected ($env variable):" "$@" >&2
					set +e ; return 1
				}
				[ -n "$3" ] || {
					echo "⛔ ERROR: SystemContext: command argument required, use 'cat':" "$@" >&2
					set +e ; return 1
				}
				local idx="--${1#'--unroll-filter-match-'}" cmd="${3:-'cat'}"; shift 3 || :
				eval export "$env"
				DistroSystemContext "$idx" awk -v ev="$env" '
					BEGIN {
						s = ENVIRON[ev]
						n = split(s, L, "\n")
						for (i = 1; i <= n; i++) if (L[i] != "") map[L[i]] = 1
					}
					$1 in map { print }
				' \
				| "$cmd" "$@"
				return 0
			;;
			--uncache|--uncache-index)
				shift
				# echo "DistroSystemContext: clear cache" >&2
				# rm -rf "$MDLT_ORIGIN"/.cached
				unset \
					MDSC_IDPALL_NAME MDSC_IDPALL \
					MDSC_IDBSEQ_NAME MDSC_IDBSEQ \
					MDSC_IDSEQS_NAME MDSC_IDSEQS \
					MDSC_IDOPRV_NAME MDSC_IDOPRV \
					MDSC_IDAPRV_NAME MDSC_IDAPRV \
					MDSC_IDODCL_NAME MDSC_IDODCL \
					MDSC_IDADCL_NAME MDSC_IDADCL \
					MDSC_IDOKWD_NAME MDSC_IDOKWD \
					MDSC_IDAKWD_NAME MDSC_IDAKWD \
				
				return 0
			;;
		esac
	}
fi

case "$1" in
	--distro-*|--run-from-*|--init-*)
		if DistroSystemContext --is-spec-option "$1" ; then
			[ -z "$MDSC_DETAIL" ] || echo "DistroSystemContext: input spec: $1" >&2
			. "$MDLT_ORIGIN/myx/myx.distro-system/sh-lib/SystemContext.SetInputSpec.include"
			shift
		fi
	;;
esac
